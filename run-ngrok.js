/**
 * Snail to Riches - –ú–æ–¥—É–ª—å –∑–∞–ø—É—Å–∫–∞ ngrok-—Ç—É–Ω–Ω–µ–ª—è
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã–π —Ç—É–Ω–Ω–µ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
 */

// –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–∞ Railway —ç—Ç–æ—Ç —Ñ–∞–π–ª –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
console.log('Ngrok –≤ Railway –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–π URL.');
process.exit(0);

const ngrok = require('ngrok');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
const CONFIG = {
  // –ü–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  defaultPort: 8001,
  
  // –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è URL
  urlFile: 'ngrok-url.txt',
  
  // Authtoken –¥–ª—è ngrok (–≤ –∏–¥–µ–∞–ª–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
  authtoken: process.env.NGROK_AUTH_TOKEN || '2vB1076Y3cPh8Kif6NVuDIV8eAi_2Vnu9ZFtY3SQSQ4bUQCj1',
  
  // –¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  connectionTimeout: 30000
};

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
 * @param {string} level - –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (info, success, error, warning)
 */
function log(message, level = 'info') {
  const timestamp = new Date().toLocaleTimeString();
  const prefix = {
    info: 'üî∑',
    success: '‚úÖ',
    error: '‚ùå',
    warning: '‚ö†Ô∏è',
    start: 'üöÄ',
    cleanup: 'üßπ'
  }[level] || '‚Ä¢';
  
  console.log(`${prefix} [${timestamp}] ${message}`);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Ä—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏, –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
 * @returns {number} –ü–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
function getPort() {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
  const portArg = process.argv.find(arg => arg.startsWith('--port='));
  if (portArg) {
    const port = parseInt(portArg.split('=')[1], 10);
    if (!isNaN(port)) {
      log(`–ü–æ–ª—É—á–µ–Ω –ø–æ—Ä—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏: ${port}`);
      return port;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é httpPort
  if (global.httpPort) {
    log(`–ü–æ–ª—É—á–µ–Ω –ø–æ—Ä—Ç –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π: ${global.httpPort}`);
    return global.httpPort;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (process.env.HTTP_PORT) {
    const port = parseInt(process.env.HTTP_PORT, 10);
    if (!isNaN(port)) {
      log(`–ü–æ–ª—É—á–µ–Ω –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${port}`);
      return port;
    }
  }
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  log(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ${CONFIG.defaultPort}`, 'warning');
  return CONFIG.defaultPort;
}

/**
 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç—É–Ω–Ω–µ–ª–∏ –∏ –æ—á–∏—â–∞–µ—Ç —Ñ–∞–π–ª—ã
 * @returns {Promise<void>}
 */
async function cleanup() {
  try {
    log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...', 'cleanup');
    await ngrok.kill();
    log('–ü—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã', 'success');
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${error.message}`, 'warning');
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }

  // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª URL
  try {
    if (fs.existsSync(CONFIG.urlFile)) {
      fs.unlinkSync(CONFIG.urlFile);
      log(`–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª URL: ${CONFIG.urlFile}`, 'success');
    }
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ URL: ${error.message}`, 'warning');
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç URL –≤ —Ñ–∞–π–ª –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
 * @param {string} url - URL –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 * @returns {string} –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π URL
 */
function saveUrl(url) {
  try {
    // –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª % –∏–∑ URL –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    const cleanUrl = url.replace(/%/g, '');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ —Ñ–∞–π–ª
    fs.writeFileSync(CONFIG.urlFile, cleanUrl);
    
    log(`URL —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${CONFIG.urlFile}`, 'success');
    return cleanUrl;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ URL: ${error.message}`, 'error');
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π URL
    return url;
  }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç ngrok –∏ —Å–æ–∑–¥–∞–µ—Ç —Ç—É–Ω–Ω–µ–ª—å
 * @returns {Promise<void>}
 */
async function startNgrok() {
  log('=== –ó–ê–ü–£–°–ö NGROK ===', 'start');
  
  try {
    // –û—á–∏—Å—Ç–∫–∞
    await cleanup();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç
    const port = getPort();
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
    log(`–ó–∞–ø—É—Å–∫ —Ç—É–Ω–Ω–µ–ª—è –¥–ª—è –ø–æ—Ä—Ç–∞ ${port}...`, 'info');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º ngrok —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    let url;
    try {
      // –°–æ–∑–¥–∞–µ–º Promise —Å —Ç–∞–π–º–∞—É—Ç–æ–º
      const ngrokPromise = ngrok.connect({
        addr: port,
        authtoken: CONFIG.authtoken
      });
      
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (${CONFIG.connectionTimeout}ms)`)), 
                  CONFIG.connectionTimeout);
      });
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.race –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
      url = await Promise.race([ngrokPromise, timeoutPromise]);
    } catch (error) {
      log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ngrok: ${error.message}`, 'error');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –æ—à–∏–±–∫–∏
      if (error.message.includes('authtoken')) {
        log('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π authtoken –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è NGROK_AUTH_TOKEN', 'error');
      } else if (error.message.includes('timeout')) {
        log('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å', 'error');
      }
      
      process.exit(1);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º URL
    const cleanUrl = saveUrl(url);
    
    log(`–£–°–ü–ï–•! –¢—É–Ω–Ω–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${cleanUrl}`, 'success');
    log('–¢—É–Ω–Ω–µ–ª—å –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é', 'success');
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', handleShutdown);
    process.on('SIGTERM', handleShutdown);
    
    // –í—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
    log('–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏', 'info');
    
  } catch (error) {
    log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
    await ngrok.kill();
    process.exit(1);
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
 */
async function handleShutdown() {
  log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ngrok...', 'warning');
  try {
    await ngrok.kill();
    log('ngrok –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'success');
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ ngrok: ${error.message}`, 'error');
  }
  process.exit(0);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
startNgrok().catch(error => {
  log(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
  process.exit(1);
}); 