#!/usr/bin/env node

/**
 * Snail to Riches - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–æ–º –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞: HTTP-—Å–µ—Ä–≤–µ—Ä, ngrok-—Ç—É–Ω–Ω–µ–ª—å –∏ Telegram-–±–æ—Ç
 */

const { spawn, exec } = require('child_process');
const fs = require('fs');
const path = require('path');
const util = require('util');
require('dotenv').config();

// –ü—Ä–æ–º–∏—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º exec –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const execAsync = util.promisify(exec);

// ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ==========

// –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const MODE = args.find(arg => arg.startsWith('--mode='))?.split('=')[1] || 'full';
const CLEAN = args.includes('--clean');
const HELP = args.includes('--help') || args.includes('-h');
const VERBOSE = args.includes('--verbose') || args.includes('-v');
const NO_NGROK = args.includes('--no-ngrok');

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Ä—Ç–æ–≤ –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
global.httpPort = null;
global.botPort = null;
let serverProcess = null;
let ngrokData = null;
let botProcess = null;

// ========== –§–£–ù–ö–¶–ò–ò –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ==========

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —ç–º–æ–¥–∑–∏
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
 * @param {string} type - –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (info, success, error, warning)
 * @param {boolean} force - –í—ã–≤–æ–¥–∏—Ç—å –¥–∞–∂–µ –µ—Å–ª–∏ —Ä–µ–∂–∏–º VERBOSE –≤—ã–∫–ª—é—á–µ–Ω
 */
function log(message, type = 'info', force = true) {
    if (!force && !VERBOSE) return;

    const prefixes = {
        info: 'üî∑',
        success: '‚úÖ',
        error: '‚ùå',
        warning: '‚ö†Ô∏è',
        start: 'üöÄ',
        cleanup: 'üßπ'
    };
    
    const prefix = prefixes[type] || '‚Ä¢';
    console.log(`${prefix} ${message}`);
}

// ========== –§–£–ù–ö–¶–ò–ò –°–ü–†–ê–í–ö–ò ==========

/**
 * –í—ã–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å–∫—Ä–∏–ø—Ç–∞
 */
function showHelp() {
    console.log(`
Snail to Riches - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node start.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --mode=<—Ä–µ–∂–∏–º>   –†–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞ (full, app, bot, ngrok)
  --clean          –û—á–∏—Å—Ç–∏—Ç—å –ø–æ—Ä—Ç—ã –∏ –∫—ç—à –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
  --verbose, -v    –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤
  --help, -h       –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  --no-ngrok       –ó–∞–ø—É—Å–∫ –±–µ–∑ ngrok (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä)

–†–µ–∂–∏–º—ã:
  full   –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  app    –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ HTTP —Å–µ—Ä–≤–µ—Ä
  bot    –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ Telegram –±–æ—Ç–∞
  ngrok  –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ ngrok —Ç—É–Ω–Ω–µ–ª—å
    `);
    process.exit(0);
}

// ========== –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–¶–ï–°–°–ê–ú–ò ==========

/**
 * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ –∏–º–µ–Ω–∏
 * @param {string} name - –ò–º—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
 * @returns {Promise<void>}
 */
async function killProcess(name) {
    log(`–ü–æ–ø—ã—Ç–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: ${name}`, 'cleanup');
    
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–æ–º–∞–Ω–¥—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        const cmd = process.platform === 'win32'
            ? `taskkill /F /IM ${name} /T`
            : `pkill -f "${name}"`;
        
        await execAsync(cmd);
        log(`–ü—Ä–æ—Ü–µ—Å—Å ${name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, 'success');
    } catch (error) {
        log(`–ü—Ä–æ—Ü–µ—Å—Å ${name} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, 'info', false);
    }
}

// ========== –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–†–¢–ê–ú–ò ==========

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ—Ä—Ç—ã
 * @returns {Promise<void>}
 */
async function cleanupPorts() {
    log('–û—á–∏—Å—Ç–∫–∞ –∑–∞–Ω—è—Ç—ã—Ö –ø–æ—Ä—Ç–æ–≤...', 'cleanup');
    
    // –°–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
    const ports = [3000, 3001, 4040];
    
    for (const port of ports) {
        log(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ ${port}...`, 'info', false);
        
        try {
            // –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–≥–æ –ø–æ—Ä—Ç
            const findCmd = process.platform === 'win32'
                ? `netstat -ano | findstr :${port}`
                : `lsof -i :${port} | grep LISTEN`;
            
            const { stdout } = await execAsync(findCmd);
            
            if (stdout) {
                log(`–ü–æ—Ä—Ç ${port} –∑–∞–Ω—è—Ç.`, 'warning');
                
                // –ü–æ–ª—É—á–∞–µ–º PID –ø—Ä–æ—Ü–µ—Å—Å–∞
                let pid;
                if (process.platform === 'win32') {
                    pid = stdout.trim().split(/\s+/).pop();
                } else {
                    pid = stdout.trim().split(/\s+/)[1];
                }
                
                if (pid) {
                    // –£–±–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                    const killCmd = process.platform === 'win32'
                        ? `taskkill /F /PID ${pid}`
                        : `kill -9 ${pid}`;
                    
                    await execAsync(killCmd);
                    log(`–ü—Ä–æ—Ü–µ—Å—Å —Å PID ${pid} –Ω–∞ –ø–æ—Ä—Ç—É ${port} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`, 'success');
                }
            } else {
                log(`–ü–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω`, 'info', false);
            }
        } catch (error) {
            // –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
            log(`–ü–æ—Ä—Ç ${port} —Å–≤–æ–±–æ–¥–µ–Ω`, 'info', false);
        }
    }
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç, –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ
 * @param {number} startPort - –ù–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @param {number} endPort - –ö–æ–Ω–µ—á–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {Promise<number>} –°–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç
 */
async function findFreePort(startPort, endPort = startPort + 100) {
    log(`–ü–æ–∏—Å–∫ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ –æ—Ç ${startPort} –¥–æ ${endPort}...`, 'info');
    
    for (let port = startPort; port <= endPort; port++) {
        try {
            const findCmd = process.platform === 'win32'
                ? `netstat -ano | findstr :${port}`
                : `lsof -i :${port} | grep LISTEN`;
            
            const { stdout } = await execAsync(findCmd);
            
            if (!stdout) {
                // –ü–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
                log(`–ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç: ${port}`, 'success');
                return port;
            }
        } catch (error) {
            // –û—à–∏–±–∫–∞ –æ–±—ã—á–Ω–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø–æ—Ä—Ç —Å–≤–æ–±–æ–¥–µ–Ω
            log(`–ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç: ${port}`, 'success');
            return port;
        }
    }
    
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–≤–æ–±–æ–¥–Ω—ã–π –ø–æ—Ä—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${startPort}-${endPort}`);
}

// ========== –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –§–ê–ô–õ–ê–ú–ò ==========

/**
 * –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
 */
function cleanupFiles() {
    log('–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...', 'cleanup');
    
    const filesToRemove = [
        'ngrok-url.txt',
        'ngrok_output.txt'
    ];
    
    filesToRemove.forEach(file => {
        if (fs.existsSync(file)) {
            fs.unlinkSync(file);
            log(`–§–∞–π–ª ${file} —É–¥–∞–ª–µ–Ω`, 'success');
        }
    });
}

// ========== –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ==========

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç HTTP —Å–µ—Ä–≤–µ—Ä
 * @returns {Promise<object>} –ü—Ä–æ—Ü–µ—Å—Å HTTP —Å–µ—Ä–≤–µ—Ä–∞
 */
async function startServer() {
    log('–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞...', 'start');
    
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ 3000 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const httpPort = process.env.PORT || 3000;
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        global.httpPort = httpPort;
        
        log(`HTTP —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${httpPort}`, 'info');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        const serverProcess = spawn('npx', ['http-server', '.', '-p', httpPort.toString()], {
            stdio: ['inherit', 'pipe', 'pipe']
        });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ —Å–µ—Ä–≤–µ—Ä–∞
        serverProcess.stdout.on('data', (data) => {
            log(`HTTP: ${data.toString().trim()}`, 'info', false);
        });

        serverProcess.stderr.on('data', (data) => {
            log(`HTTP –æ—à–∏–±–∫–∞: ${data.toString().trim()}`, 'error');
        });

        serverProcess.on('error', (error) => {
            log(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`, 'error');
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ —Å–µ—Ä–≤–µ—Ä
        await new Promise((resolve, reject) => {
            // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
            const timeout = setTimeout(() => {
                reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞'));
            }, 5000);

            // –ü—Ä–∏ –ª—é–±—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ stdout —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            serverProcess.stdout.once('data', () => {
                clearTimeout(timeout);
                resolve();
            });

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞
            serverProcess.on('exit', (code) => {
                if (code !== 0 && code !== null) {
                    clearTimeout(timeout);
                    reject(new Error(`HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π ${code}`));
                }
            });
        });

        log(`HTTP —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${httpPort}`, 'success');
        return serverProcess;
    } catch (error) {
        log(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å HTTP —Å–µ—Ä–≤–µ—Ä: ${error.message}`, 'error');
        throw error;
    }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç ngrok —Ç—É–Ω–Ω–µ–ª—å
 * @returns {Promise<object>} –û–±—ä–µ–∫—Ç —Å –ø—Ä–æ—Ü–µ—Å—Å–æ–º –∏ URL ngrok
 */
async function startNgrok() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ production –æ–∫—Ä—É–∂–µ–Ω–∏–∏
    const isProduction = process.env.NODE_ENV === 'production' || 
                          !!process.env.SERVER_URL;
    
    // –í production —Ä–µ–∂–∏–º–µ –∏–ª–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–ª–∞–≥ NO_NGROK, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—É—Å–∫ ngrok
    if (isProduction || NO_NGROK) {
        log('–ó–∞–ø—É—Å–∫ ngrok –æ—Ç–∫–ª—é—á–µ–Ω (production –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–ª–∏ —Ñ–ª–∞–≥ --no-ngrok)', 'info');
        
        // –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º SERVER_URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if (isProduction && process.env.SERVER_URL) {
            log(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${process.env.SERVER_URL}`, 'success');
            return { url: process.env.SERVER_URL };
        }
        
        // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π URL
        const localUrl = 'http://localhost:' + (global.httpPort || 8001);
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ª–æ–∫–∞–ª—å–Ω—ã–º URL
        fs.writeFileSync('ngrok-url.txt', localUrl, 'utf8');
        log(`–°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª —Å –ª–æ–∫–∞–ª—å–Ω—ã–º URL: ${localUrl}`, 'success');
        return { url: localUrl };
    }
    
    log('–ó–∞–ø—É—Å–∫ ngrok —Ç—É–Ω–Ω–µ–ª—è...', 'start');
    
    try {
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π URL-—Ñ–∞–π–ª –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (fs.existsSync('ngrok-url.txt')) {
            fs.unlinkSync('ngrok-url.txt');
        }
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–∫—Ä–∏–ø—Ç–∞ ngrok
        const args = ['run-ngrok.js'];
        if (global.httpPort) {
            args.push(`--port=${global.httpPort}`);
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º ngrok —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        const ngrokProcess = spawn('node', args, {
            stdio: ['inherit', 'pipe', 'pipe'],
            env: { ...process.env, HTTP_PORT: global.httpPort }
        });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ ngrok
        ngrokProcess.stdout.on('data', (data) => {
            log(`NGROK: ${data.toString().trim()}`, 'info', false);
        });

        ngrokProcess.stderr.on('data', (data) => {
            log(`NGROK –æ—à–∏–±–∫–∞: ${data.toString().trim()}`, 'error');
        });

        ngrokProcess.on('error', (error) => {
            log(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ ngrok: ${error.message}`, 'error');
        });
        
        // –û–∂–∏–¥–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å URL
        return new Promise((resolve, reject) => {
            // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è URL
            const timeout = setTimeout(() => {
                reject(new Error('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è URL ngrok'));
            }, 20000);

            // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å URL
            const checkUrlFile = () => {
                if (fs.existsSync('ngrok-url.txt')) {
                    try {
                        const url = fs.readFileSync('ngrok-url.txt', 'utf8').trim();
                        if (url) {
                            clearTimeout(timeout);
                            log(`–ü–æ–ª—É—á–µ–Ω ngrok URL: ${url}`, 'success');
                            resolve({ process: ngrokProcess, url });
                            return;
                        }
                    } catch (e) {
                        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —Å –æ—à–∏–±–∫–æ–π
                if (ngrokProcess.exitCode !== null && ngrokProcess.exitCode !== 0) {
                    clearTimeout(timeout);
                    reject(new Error(`–ü—Ä–æ—Ü–µ—Å—Å ngrok –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π ${ngrokProcess.exitCode}`));
                    return;
                }
                
                // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
                setTimeout(checkUrlFile, 1000);
            };
            
            // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(checkUrlFile, 3000);
        });
    } catch (error) {
        log(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å ngrok: ${error.message}`, 'error');
        throw error;
    }
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –±–æ—Ç–∞
 * @param {string} ngrokUrl - URL ngrok –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns {Promise<object>} –ü—Ä–æ—Ü–µ—Å—Å Telegram –±–æ—Ç–∞
 */
async function startBot(ngrokUrl) {
    log('–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...', 'start');
    
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —Å–≤–æ–±–æ–¥–Ω—ã–π
        const botPort = process.env.BOT_PORT || await findFreePort(3001);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        global.botPort = botPort;
        
        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
        const env = { ...process.env };
        
        // –ï—Å–ª–∏ –º—ã –≤ production, –∏—Å–ø–æ–ª—å–∑—É–µ–º SERVER_URL –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
        if (process.env.NODE_ENV === 'production' || process.env.SERVER_URL) {
            log(`–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${process.env.SERVER_URL}`, 'info');
        } 
        // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ ngrok –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
        else if (ngrokUrl) {
            env.NGROK_URL = ngrokUrl;
            log(`–ü–µ—Ä–µ–¥–∞–µ–º URL –≤ –±–æ—Ç–∞: ${ngrokUrl}`, 'info', false);
        }
        
        // –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Ä—Ç –±–æ—Ç—É —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env.PORT = botPort.toString();
        
        log(`Telegram –±–æ—Ç –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${botPort}`, 'info');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        const botProcess = spawn('node', ['bot.js'], {
            stdio: ['inherit', 'pipe', 'pipe'],
            env
        });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –±–æ—Ç–∞
        botProcess.stdout.on('data', (data) => {
            log(`BOT: ${data.toString().trim()}`, 'info', false);
        });

        botProcess.stderr.on('data', (data) => {
            log(`BOT –æ—à–∏–±–∫–∞: ${data.toString().trim()}`, 'error');
        });

        botProcess.on('error', (error) => {
            log(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: ${error.message}`, 'error');
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –ª–∏ –±–æ—Ç
        await new Promise((resolve, reject) => {
            // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
            const timeout = setTimeout(() => {
                reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞'));
            }, 10000);

            // –ü—Ä–∏ –ª—é–±—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ stdout —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
            botProcess.stdout.once('data', () => {
                clearTimeout(timeout);
                resolve();
            });

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞
            botProcess.on('exit', (code) => {
                if (code !== 0 && code !== null) {
                    clearTimeout(timeout);
                    reject(new Error(`Telegram –±–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π ${code}`));
                }
            });
        });

        log(`Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${botPort}`, 'success');
        return botProcess;
    } catch (error) {
        log(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞: ${error.message}`, 'error');
        throw error;
    }
}

// ========== –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ==========

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
async function main() {
    try {
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
        console.log('========================================');
        console.log('üêå Snail to Riches - –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        console.log('========================================');
        console.log(`–†–µ–∂–∏–º: ${MODE}, –û—á–∏—Å—Ç–∫–∞: ${CLEAN ? '–î–∞' : '–ù–µ—Ç'}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞
        if (HELP) {
            showHelp();
            return;
        }
        
        // –û—á–∏—Å—Ç–∫–∞, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞
        if (CLEAN) {
            await cleanupPorts();
            cleanupFiles();
            
            // –£–±–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            await killProcess('ngrok');
            await killProcess('node bot.js');
            await killProcess('http-server');
            
            // –ñ–¥–µ–º —á—Ç–æ–±—ã –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        // –ó–∞–ø—É—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        switch (MODE) {
            case 'full':
                // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
                serverProcess = await startServer();
                ngrokData = await startNgrok();
                botProcess = await startBot(ngrokData.url);
                break;
                
            case 'app':
                // –¢–æ–ª—å–∫–æ HTTP —Å–µ—Ä–≤–µ—Ä
                serverProcess = await startServer();
                break;
                
            case 'bot':
                // –¢–æ–ª—å–∫–æ –±–æ—Ç
                botProcess = await startBot();
                break;
                
            case 'ngrok':
                // –¢–æ–ª—å–∫–æ ngrok
                ngrokData = await startNgrok();
                break;
                
            default:
                log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: ${MODE}`, 'error');
                process.exit(1);
        }
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
        console.log('========================================');
        log('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã!', 'success');
        if (ngrokData?.url) {
            log(`URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: ${ngrokData.url}`, 'success');
        }
        console.log('========================================');
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process.on('SIGINT', async () => {
            log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...', 'info');
            
            // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
            if (serverProcess) serverProcess.kill();
            if (ngrokData?.process) ngrokData.process.kill();
            if (botProcess) botProcess.kill();
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            await killProcess('ngrok');
            await killProcess('node bot.js');
            await killProcess('http-server');
            
            log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
            process.exit(0);
        });
        
    } catch (error) {
        log(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
        
        // –ü—ã—Ç–∞–µ–º—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        if (serverProcess) serverProcess.kill();
        if (ngrokData?.process) ngrokData.process.kill();
        if (botProcess) botProcess.kill();
        
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main(); 